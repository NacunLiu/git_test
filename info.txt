working directory/tree   --->>>   staging area/index --->>> repo
git init                                    init and create .git document
git status                                  check the status of current repo will show wheter there is untracked content or changes
git config user.name  name
git config user.email email                 config projectg level username and email signature and this will overwrite the local settings in this particular project
git config --global user.name name
git config --global user.email email
git config user.name                        check current signature
git add  name.txt                           add content to staging area before commit to the local repo
git rm --cache name.txt                     remove content from staging area
git commit name.text                        commit changes to local repo
git checkout name.txt                       abort all changes and roll back to the latest commit
git commit -m "message"  name.txt           directly commit without entering the vim editor
git log                                     check historical commit info
git log --pretty=oneline                    each commit only shows in oneline
git log --oneline                           each commit only shows in online and also show in less info
git reflog                                  extra shows how many steps to go back to the certain version
git reset --hard  num                       roll to certain version, fill the version number after --hard 
git reset --hard ^/~n                       can also use ^, 1 ^ represent roll back 1 step,or use git reset --hard ~n to roll back n steps, these 2 methods can only roll back not forward
git help reset                              git help command to check how to use certain command
git reset --mixed                           --mixed move the Head pointer and update the index field but not affect working tree
git reset --soft                            --soft only move Head pointer in the local repo will not affect index field and working directory
git diff name.txt                           compare the file with that in the staging area
git diff version-num name.txt               compare the current file on work directory and certain version
branch                                      running multiple task in multiple line at the same time so can parllel development and one branch development fail won't affect other branch development
git branch -v                                check the branches we have
git branch name                             create a new branch
git checkout name                           switch to certain branch
hotfix                                      means the server still runnning whlie doing the fix, this is especially at internet server
git branch -d name                          delete certain branch
git merge name                              first checkout to the branch which will accept modify then appoint which branch gonna be imported
git add name.txt                            manually resolve conflict, ---->HEAD ====== remove all the symbols and keep the content you want then save and quit. then add the change to staging area
git commit                                  finally must do a full commmit not partial commit to finish the merge. now these two branch have different content in them and git will accept the difference and indicates already up to date
git remote -v                               check the current local repo has connect to how many and what names and urls of the remote repository
git remote add origin url                   add a remote repo url and also give the remote repo a name as you want by default its origin or upstream
git remote rename old-name new-name         rename a remote repo in local repo connection
git remote set-url name url                 reset a url of a remote repo name
git push origin branch-name                 pushe branch-name of local repo to remote repo origin
